/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Refund as PrismaRefund,
  PaymentIntent as PrismaPaymentIntent,
} from "@prisma/client";

export class RefundServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RefundCountArgs, "select">): Promise<number> {
    return this.prisma.refund.count(args);
  }

  async refunds<T extends Prisma.RefundFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefundFindManyArgs>
  ): Promise<PrismaRefund[]> {
    return this.prisma.refund.findMany<Prisma.RefundFindManyArgs>(args);
  }
  async refund<T extends Prisma.RefundFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefundFindUniqueArgs>
  ): Promise<PrismaRefund | null> {
    return this.prisma.refund.findUnique(args);
  }
  async createRefund<T extends Prisma.RefundCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefundCreateArgs>
  ): Promise<PrismaRefund> {
    return this.prisma.refund.create<T>(args);
  }
  async updateRefund<T extends Prisma.RefundUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefundUpdateArgs>
  ): Promise<PrismaRefund> {
    return this.prisma.refund.update<T>(args);
  }
  async deleteRefund<T extends Prisma.RefundDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefundDeleteArgs>
  ): Promise<PrismaRefund> {
    return this.prisma.refund.delete(args);
  }

  async getPaymentIntent(
    parentId: string
  ): Promise<PrismaPaymentIntent | null> {
    return this.prisma.refund
      .findUnique({
        where: { id: parentId },
      })
      .paymentIntent();
  }
}
