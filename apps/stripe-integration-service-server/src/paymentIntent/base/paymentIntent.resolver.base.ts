/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentIntent } from "./PaymentIntent";
import { PaymentIntentCountArgs } from "./PaymentIntentCountArgs";
import { PaymentIntentFindManyArgs } from "./PaymentIntentFindManyArgs";
import { PaymentIntentFindUniqueArgs } from "./PaymentIntentFindUniqueArgs";
import { CreatePaymentIntentArgs } from "./CreatePaymentIntentArgs";
import { UpdatePaymentIntentArgs } from "./UpdatePaymentIntentArgs";
import { DeletePaymentIntentArgs } from "./DeletePaymentIntentArgs";
import { RefundFindManyArgs } from "../../refund/base/RefundFindManyArgs";
import { Refund } from "../../refund/base/Refund";
import { PaymentIntentService } from "../paymentIntent.service";
@graphql.Resolver(() => PaymentIntent)
export class PaymentIntentResolverBase {
  constructor(protected readonly service: PaymentIntentService) {}

  async _paymentIntentsMeta(
    @graphql.Args() args: PaymentIntentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentIntent])
  async paymentIntents(
    @graphql.Args() args: PaymentIntentFindManyArgs
  ): Promise<PaymentIntent[]> {
    return this.service.paymentIntents(args);
  }

  @graphql.Query(() => PaymentIntent, { nullable: true })
  async paymentIntent(
    @graphql.Args() args: PaymentIntentFindUniqueArgs
  ): Promise<PaymentIntent | null> {
    const result = await this.service.paymentIntent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentIntent)
  async createPaymentIntent(
    @graphql.Args() args: CreatePaymentIntentArgs
  ): Promise<PaymentIntent> {
    return await this.service.createPaymentIntent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PaymentIntent)
  async updatePaymentIntent(
    @graphql.Args() args: UpdatePaymentIntentArgs
  ): Promise<PaymentIntent | null> {
    try {
      return await this.service.updatePaymentIntent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentIntent)
  async deletePaymentIntent(
    @graphql.Args() args: DeletePaymentIntentArgs
  ): Promise<PaymentIntent | null> {
    try {
      return await this.service.deletePaymentIntent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Refund], { name: "refunds" })
  async findRefunds(
    @graphql.Parent() parent: PaymentIntent,
    @graphql.Args() args: RefundFindManyArgs
  ): Promise<Refund[]> {
    const results = await this.service.findRefunds(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
