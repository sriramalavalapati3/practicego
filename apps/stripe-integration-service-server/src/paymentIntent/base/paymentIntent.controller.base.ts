/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentIntentService } from "../paymentIntent.service";
import { PaymentIntentCreateInput } from "./PaymentIntentCreateInput";
import { PaymentIntent } from "./PaymentIntent";
import { PaymentIntentFindManyArgs } from "./PaymentIntentFindManyArgs";
import { PaymentIntentWhereUniqueInput } from "./PaymentIntentWhereUniqueInput";
import { PaymentIntentUpdateInput } from "./PaymentIntentUpdateInput";
import { RefundFindManyArgs } from "../../refund/base/RefundFindManyArgs";
import { Refund } from "../../refund/base/Refund";
import { RefundWhereUniqueInput } from "../../refund/base/RefundWhereUniqueInput";

export class PaymentIntentControllerBase {
  constructor(protected readonly service: PaymentIntentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentIntent })
  async createPaymentIntent(
    @common.Body() data: PaymentIntentCreateInput
  ): Promise<PaymentIntent> {
    return await this.service.createPaymentIntent({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        customerId: true,
        id: true,
        paymentMethod: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentIntent] })
  @ApiNestedQuery(PaymentIntentFindManyArgs)
  async paymentIntents(
    @common.Req() request: Request
  ): Promise<PaymentIntent[]> {
    const args = plainToClass(PaymentIntentFindManyArgs, request.query);
    return this.service.paymentIntents({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        customerId: true,
        id: true,
        paymentMethod: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentIntent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paymentIntent(
    @common.Param() params: PaymentIntentWhereUniqueInput
  ): Promise<PaymentIntent | null> {
    const result = await this.service.paymentIntent({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        customerId: true,
        id: true,
        paymentMethod: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentIntent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaymentIntent(
    @common.Param() params: PaymentIntentWhereUniqueInput,
    @common.Body() data: PaymentIntentUpdateInput
  ): Promise<PaymentIntent | null> {
    try {
      return await this.service.updatePaymentIntent({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          currency: true,
          customerId: true,
          id: true,
          paymentMethod: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentIntent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaymentIntent(
    @common.Param() params: PaymentIntentWhereUniqueInput
  ): Promise<PaymentIntent | null> {
    try {
      return await this.service.deletePaymentIntent({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          currency: true,
          customerId: true,
          id: true,
          paymentMethod: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/refunds")
  @ApiNestedQuery(RefundFindManyArgs)
  async findRefunds(
    @common.Req() request: Request,
    @common.Param() params: PaymentIntentWhereUniqueInput
  ): Promise<Refund[]> {
    const query = plainToClass(RefundFindManyArgs, request.query);
    const results = await this.service.findRefunds(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,

        paymentIntent: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/refunds")
  async connectRefunds(
    @common.Param() params: PaymentIntentWhereUniqueInput,
    @common.Body() body: RefundWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      refunds: {
        connect: body,
      },
    };
    await this.service.updatePaymentIntent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/refunds")
  async updateRefunds(
    @common.Param() params: PaymentIntentWhereUniqueInput,
    @common.Body() body: RefundWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      refunds: {
        set: body,
      },
    };
    await this.service.updatePaymentIntent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/refunds")
  async disconnectRefunds(
    @common.Param() params: PaymentIntentWhereUniqueInput,
    @common.Body() body: RefundWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      refunds: {
        disconnect: body,
      },
    };
    await this.service.updatePaymentIntent({
      where: params,
      data,
      select: { id: true },
    });
  }
}
