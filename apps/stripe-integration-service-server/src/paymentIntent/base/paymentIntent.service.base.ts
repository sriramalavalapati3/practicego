/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PaymentIntent as PrismaPaymentIntent,
  Refund as PrismaRefund,
} from "@prisma/client";

export class PaymentIntentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaymentIntentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paymentIntent.count(args);
  }

  async paymentIntents<T extends Prisma.PaymentIntentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentIntentFindManyArgs>
  ): Promise<PrismaPaymentIntent[]> {
    return this.prisma.paymentIntent.findMany<Prisma.PaymentIntentFindManyArgs>(
      args
    );
  }
  async paymentIntent<T extends Prisma.PaymentIntentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentIntentFindUniqueArgs>
  ): Promise<PrismaPaymentIntent | null> {
    return this.prisma.paymentIntent.findUnique(args);
  }
  async createPaymentIntent<T extends Prisma.PaymentIntentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentIntentCreateArgs>
  ): Promise<PrismaPaymentIntent> {
    return this.prisma.paymentIntent.create<T>(args);
  }
  async updatePaymentIntent<T extends Prisma.PaymentIntentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentIntentUpdateArgs>
  ): Promise<PrismaPaymentIntent> {
    return this.prisma.paymentIntent.update<T>(args);
  }
  async deletePaymentIntent<T extends Prisma.PaymentIntentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentIntentDeleteArgs>
  ): Promise<PrismaPaymentIntent> {
    return this.prisma.paymentIntent.delete(args);
  }

  async findRefunds(
    parentId: string,
    args: Prisma.RefundFindManyArgs
  ): Promise<PrismaRefund[]> {
    return this.prisma.paymentIntent
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .refunds(args);
  }
}
